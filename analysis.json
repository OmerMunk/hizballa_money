{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Financial Intelligence System Analysis\n",
        "\n",
        "This notebook demonstrates how to analyze the transaction data and risk patterns using our system's APIs."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "import requests\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import networkx as nx\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "# Configure API endpoints\n",
        "BASE_URL = 'http://localhost:5001'\n",
        "ANALYSIS_URL = 'http://localhost:5002'\n",
        "SCORING_URL = 'http://localhost:5003'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 1. Load and Analyze Transaction Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "def get_transactions(start_date=None, end_date=None, min_amount=None):\n",
        "    params = {}\n",
        "    if start_date:\n",
        "        params['start_date'] = start_date\n",
        "    if end_date:\n",
        "        params['end_date'] = end_date\n",
        "    if min_amount:\n",
        "        params['min_amount'] = min_amount\n",
        "        \n    response = requests.get(f'{BASE_URL}/api/v1/transactions/search', params=params)\n",
        "    return pd.DataFrame(response.json())\n",
        "\n",
        "# Get last 24 hours of transactions\n",
        "end_date = datetime.now().isoformat()\n",
        "start_date = (datetime.now() - timedelta(days=1)).isoformat()\n",
        "df_transactions = get_transactions(start_date, end_date)\n",
        "\n",
        "print(f'Loaded {len(df_transactions)} transactions')\n",
        "df_transactions.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 2. Analyze Transaction Patterns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# Transaction amount distribution\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.histplot(data=df_transactions, x='amount', bins=50)\n",
        "plt.title('Transaction Amount Distribution')\n",
        "plt.xlabel('Amount')\n",
        "plt.ylabel('Count')\n",
        "plt.show()\n",
        "\n",
        "# Transaction volume over time\n",
        "df_transactions['timestamp'] = pd.to_datetime(df_transactions['timestamp'])\n",
        "hourly_volume = df_transactions.resample('H', on='timestamp')['amount'].sum()\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "hourly_volume.plot()\n",
        "plt.title('Transaction Volume by Hour')\n",
        "plt.xlabel('Hour')\n",
        "plt.ylabel('Total Amount')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 3. Analyze Risk Patterns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "def get_risk_metrics():\n",
        "    response = requests.get(f'{SCORING_URL}/api/v1/risk-metrics')\n",
        "    return response.json()\n",
        "\n",
        "risk_metrics = get_risk_metrics()\n",
        "\n",
        "# Create pie chart of risk levels\n",
        "risk_data = [\n",
        "    risk_metrics['high_risk_count'],\n",
        "    risk_metrics['medium_risk_count'],\n",
        "    risk_metrics['low_risk_count']\n",
        "]\n",
        "\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.pie(risk_data, labels=['High Risk', 'Medium Risk', 'Low Risk'], autopct='%1.1f%%', startangle=140)\n",
        "plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
        "plt.title('Risk Distribution')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "plt.pie(risk_data,\n",
        "        labels=['High Risk', 'Medium Risk', 'Low Risk'],\n",
        "        colors=['red', 'orange', 'green'],\n",
        "        autopct='%1.1f%%')\n",
        "plt.title('Distribution of Risk Levels')\n",
        "plt.show()\n",
        "\n",
        "# Plot risk score distribution\n",
        "dist = risk_metrics['risk_score_distribution']\n",
        "percentiles = dist['percentiles']\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.boxplot([dist['min'], percentiles['25'], percentiles['50'],\n",
        "            percentiles['75'], dist['max']])\n",
        "plt.title('Risk Score Distribution')\n",
        "plt.ylabel('Risk Score')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. Analyze Circular Patterns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "def get_circular_patterns(min_amount=10000):\n",
        "    response = requests.get(\n",
        "        f'{ANALYSIS_URL}/api/v1/analysis/patterns',\n",
        "        params={'min_amount': min_amount}\n",
        "    )\n",
        "    return response.json()\n",
        "\n",
        "patterns = get_circular_patterns()\n",
        "\n",
        "# Create network visualization of circular patterns\n",
        "def visualize_pattern(pattern):\n",
        "    G = nx.DiGraph()\n",
        "    \n",
        "    # Add edges from transactions\n",
        "    for i in range(len(pattern['accounts'])):\n",
        "        source = pattern['accounts'][i]\n",
        "        target = pattern['accounts'][(i + 1) % len(pattern['accounts'])]\n",
        "        amount = pattern['transactions'][i]['amount']\n",
        "        G.add_edge(source, target, amount=amount)\n",
        "    \n",
        "    # Create visualization\n",
        "    plt.figure(figsize=(10, 10))\n",
        "    pos = nx.spring_layout(G)\n",
        "    \n",
        "    # Draw nodes\n",
        "    nx.draw_networkx_nodes(G, pos, node_color='lightblue',\n",
        "                          node_size=1000)\n",
        "    \n",
        "    # Draw edges\n",
        "    nx.draw_networkx_edges(G, pos, edge_color='gray',\n",
        "                          width=2, arrowsize=20)\n",
        "    \n",
        "    # Add labels\n",
        "    nx.draw_networkx_labels(G, pos)\n",
        "    edge_labels = nx.get_edge_attributes(G, 'amount')\n",
        "    nx.draw_networkx_edge_labels(G, pos,\n",
        "                                edge_labels={k: f'${v:,.2f}'\n",
        "                                            for k, v in edge_labels.items()})\n",
        "    \n",
        "    plt.title(f'Circular Pattern (Length: {len(pattern['accounts'])})')\n",
        "    plt.axis('off')\n",
        "    plt.show()\n",
        "\n",
        "# Visualize first 3 patterns\n",
        "for pattern in patterns[:3]:\n",
        "    visualize_pattern(pattern)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 5. Entity Risk Analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "def analyze_entity_network(entity_id):\n",
        "    # Get entity's transactions\n",
        "    response = requests.get(\n",
        "        f'{BASE_URL}/api/v1/transactions/search',\n",
        "        params={'entity_id': entity_id}\n",
        "    )\n",
        "    transactions = response.json()\n",
        "    \n",
        "    # Get risk score\n",
        "    risk_response = requests.get(f'{SCORING_URL}/api/v1/risk-score/{entity_id}')\n",
        "    risk_data = risk_response.json()\n",
        "    \n    # Create network visualization\n",
        "    G = nx.DiGraph()\n",
        "    \n",
        "    # Add transactions to graph\n",
        "    for tx in transactions:\n",
        "        G.add_edge(tx['source_id'], tx['target_id'],\n",
        "                  amount=tx['amount'])\n",
        "    \n",
        "    # Visualize network\n",
        "    plt.figure(figsize=(12, 8))\n",
        "    pos = nx.spring_layout(G)\n",
        "    \n",
        "    # Color the target entity differently\n",
        "    node_colors = ['red' if node == entity_id else 'lightblue'\n",
        "                  for node in G.nodes()]\n",
        "    \n",
        "    nx.draw(G, pos, with_labels=True,\n",
        "            node_color=node_colors,\n",
        "            node_size=1000,\n",
        "            arrowsize=20)\n",
        "    \n",
        "    plt.title(f'Transaction Network for {entity_id}\\n'\n",
        "              f'Risk Score: {risk_data[\"risk_score\"]:.2f} '\n",
        "              f'({risk_data[\"risk_level\"]})')\n",
        "    plt.show()\n",
        "    \n",
        "    # Print summary statistics\n",
        "    print(f'Summary for {entity_id}:')\n",
        "    print(f'Total Transactions: {len(transactions)}')\n",
        "    print(f'Connected Entities: {len(G.nodes()) - 1}')\n",
        "    print(f'Risk Score: {risk_data[\"risk_score\"]:.2f}')\n",
        "    print(f'Risk Level: {risk_data[\"risk_level\"]}')\n",
        "\n",
        "# Analyze a specific entity\n",
        "analyze_entity_network('ACC_0001')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 6. Time Series Analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "def analyze_temporal_patterns():\n",
        "    # Get transactions for the last 7 days\n",
        "    end_date = datetime.now().isoformat()\n",
        "    start_date = (datetime.now() - timedelta(days=7)).isoformat()\n",
        "    \n",
        "    df = get_transactions(start_date, end_date)\n",
        "    df['timestamp'] = pd.to_datetime(df['timestamp'])\n",
        "    \n",
        "    # Create various time series plots\n",
        "    fig, axes = plt.subplots(3, 1, figsize=(15, 15))\n",
        "    \n",
        "    # Daily transaction volume\n",
        "    daily_volume = df.resample('D', on='timestamp')['amount'].sum()\n",
        "    daily_volume.plot(ax=axes[0], title='Daily Transaction Volume')\n",
        "    axes[0].set_ylabel('Total Amount')\n",
        "    \n",
        "    # Hourly transaction count\n",
        "    hourly_count = df.resample('H', on='timestamp').size()\n",
        "    hourly_count.plot(ax=axes[1], title='Hourly Transaction Count')\n",
        "    axes[1].set_ylabel('Number of Transactions')\n",
        "    \n",
        "    # Average transaction amount by hour of day\n",
        "    df['hour'] = df['timestamp'].dt.hour\n",
        "    hourly_avg = df.groupby('hour')['amount'].mean()\n",
        "    hourly_avg.plot(kind='bar', ax=axes[2],\n",
        "                    title='Average Transaction Amount by Hour')\n",
        "    axes[2].set_xlabel('Hour of Day')\n",
        "    axes[2].set_ylabel('Average Amount')\n",
        "    \n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "analyze_temporal_patterns()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 7. Suspicious Pattern Detection"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "def detect_suspicious_patterns():\n",
        "    # Get all high-risk entities\n",
        "    metrics = get_risk_metrics()\n",
        "    \n",
        "    # Get circular patterns\n",
        "    patterns = get_circular_patterns(min_amount=50000)\n",
        "    \n",
        "    print('Summary of Suspicious Activity:')\n",
        "    print(f'High Risk Entities: {metrics[\"high_risk_count\"]}')\n",
        "    print(f'Circular Patterns Detected: {len(patterns)}\\n')\n",
        "    \n",
        "    print('Top Circular Patterns:')\n",
        "    for i, pattern in enumerate(patterns[:5], 1):\n",
        "        print(f'\\nPattern {i}:')\n",
        "        print(f'Length: {len(pattern[\"accounts\"])} entities')\n",
        "        print(f'Total Amount: ${sum(tx[\"amount\"] for tx in pattern[\"transactions\"]):,.2f}')\n",
        "        print('Entities Involved:', ', '.join(pattern['accounts']))\n",
        "\n",
        "detect_suspicious_patterns()"
      ]
    }
  ]
}
